######HPP######
/*
* 本文件内容不要人为修改，本文件由"python3 Christmas.py Input/MergeCode/LinkModule"生成
* 如果再次运行生成脚本，人为修改的代码将被删除
* 
* The contents of this file should not be modified. This file is generated by "python3 Christmas.py Input/MergeCode/LinkModule"
* If the generation script is run again, the artificially modified code will be deleted
*/

#ifndef  _COMMON_ERRORCODE_HPP_
#define  _COMMON_ERRORCODE_HPP_

#define ERRORCODE_IsError(...) Common::ErrorCode::IsErrorHappened(__VA_ARGS__)
#define ERRORCODE_GetCode(param) Common::ErrorCode::GetErrorCode(param)
#define ERRORCODE_GetMessage(param) Common::ErrorCode::GetErrorMessage(param)

#include <map>
#include <string>
#include <vector>

enum ERROR_CODE{
    ERR_OK = 0,
    ERR_Start = -2147483646,
    ERR_Skip,
    ERR_ModuleLack,
    ERR_Task_Switch_Lack,

    @@code@@
};

namespace Common{
    class ErrorCode {
        public:
            static int IsErrorHappened(ERROR_CODE param);
            static int IsErrorHappened(ERROR_CODE &param, std::vector<ERROR_CODE> ignore);
            static std::string GetErrorCode(ERROR_CODE param);
            static std::string GetErrorMessage(ERROR_CODE param);
            static std::map<ERROR_CODE, std::vector<std::string>> errorMap;
    };
}
#endif
######HPP######

######CPP######
/*
* 本文件内容不要人为修改，本文件由"python3 Christmas.py Input/MergeCode/LinkModule"生成
* 如果再次运行生成脚本，人为修改的代码将被删除
* 
* The contents of this file should not be modified. This file is generated by "python3 Christmas.py Input/MergeCode/LinkModule"
* If the generation script is run again, the artificially modified code will be deleted
*/

#include "Kernel/Common/ErrorCode/ErrorCode.hpp"
#include "Kernel/Common/Tools/Tools.hpp"

std::map<ERROR_CODE, std::vector<std::string>> Common::ErrorCode::errorMap = {
    //{ERROR_CODE, {"errorCode", "message"}}
    {ERR_OK, {"200", "OK"}},
    {ERR_Skip, {"200", "Skip Error"}},
    {ERR_ModuleLack, {"E-CE(TASK)", "Module Lack"}},
    {ERR_Task_Switch_Lack, {"E-CE(TASK)", "Task selector switch Lack"}},

    @@code@@
};

int Common::ErrorCode::IsErrorHappened(ERROR_CODE param){
    if(param == ERR_OK){
        return 0;
    }
    return -1;
}

int Common::ErrorCode::IsErrorHappened(ERROR_CODE &param, std::vector<ERROR_CODE> ignore){
    if(param == ERR_OK){
        return 0;
    }else{
        for(const ERROR_CODE& ret:ignore) {
            if(ret == ERR_Skip){
                param = ERR_OK;
                return 0;
            }
            if(param == ret){
                param = ERR_OK;
                return 0;
            }
        }
    }
    return -1;
}

std::string Common::ErrorCode::GetErrorCode(ERROR_CODE param){
    if(ErrorCode::errorMap.count(param))
        return ErrorCode::errorMap[param][0];
    return "unknown";
}

std::string Common::ErrorCode::GetErrorMessage(ERROR_CODE param){
    if(ErrorCode::errorMap.count(param))
        return ErrorCode::errorMap[param][1];
    return "unknown";
}
######CPP######