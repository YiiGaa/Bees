######DEFAULT######
# 本文件内容不要人为修改，本文件由"python3 Christmas.py Input/MergeCode/LinkBuild"生成
# 如果再次运行生成脚本，人为修改的代码将被删除
#
# The contents of this file should not be modified. This file is generated by "python3 Christmas.py Input/MergeCode/LinkBuild"
# If the generation script is run again, the artificially modified code will be deleted

cmake_minimum_required(VERSION 3.30.5)
set(TARGET "@@target@@")                                                #module/task/boostrap

#the name of Compiled program
if(NOT "${TARGET}" STREQUAL "boot")
    project(Boot)
else()
    project(Sample)
endif()

#STEP::head file root directory
message("")
message("※head file root:")
include_directories(${CMAKE_CURRENT_LIST_DIR}/../)                          #setting head file root
include_directories(${CMAKE_INCLUDE_PATH})                                  #include conan static library head file
message("--project root")
message("   ${CMAKE_CURRENT_LIST_DIR}/../")
message("--lib root")
message("   ${CMAKE_INCLUDE_PATH}")

#STEP::c++ file collect
message("")
message("※c++ file collect:")
FILE(GLOB FILECOMMON "${CMAKE_SOURCE_DIR}/../Kernel/Common/*/*.cpp")                    #all common cpp
if("${TARGET}" STREQUAL "module")
    FILE(GLOB FILEMODULE "${CMAKE_SOURCE_DIR}/../Kernel/Module/@@target name@@/*.cpp")      #module cpp
    FILE(GLOB FILEROOT "${CMAKE_SOURCE_DIR}/../Kernel/Module/@@target name@@/Sample*.cpp")  #all sample cpp
    list(REMOVE_ITEM FILEMODULE ${FILEROOT})
endif()
if("${TARGET}" STREQUAL "task")
    FILE(GLOB FILEMODULE "${CMAKE_SOURCE_DIR}/../Kernel/Module/*/*.cpp")  #all module cpp
    FILE(GLOB FILEMODULEREMOVE "${CMAKE_SOURCE_DIR}/../Kernel/Module/*/Sample*.cpp")     #remove sample cpp
    FILE(GLOB FILEROOT "${CMAKE_SOURCE_DIR}/../Kernel/Task/@@target name@@/Sample*.cpp")   #all sample cpp
    list(REMOVE_ITEM FILEMODULE ${FILEMODULEREMOVE})
endif()
if("${TARGET}" STREQUAL "boot")
    FILE(GLOB FILEMODULE "${CMAKE_SOURCE_DIR}/../Kernel/*/*/*.cpp")  #all module aand task cpp
    FILE(GLOB FILEMODULEREMOVE "${CMAKE_SOURCE_DIR}/../Kernel/*/*/Sample*.cpp")  #module cpp      #all module cpp
    FILE(GLOB FILEROOT "${CMAKE_SOURCE_DIR}/../Kernel/main.cpp")   #main.cpp
    list(REMOVE_ITEM FILEMODULE ${FILEMODULEREMOVE})
endif()
message("--module file")
foreach(v ${FILEMODULE})
    message("   ${v}")
endforeach()
message("--common file")
foreach(v ${FILECOMMON})
    message("   ${v}")
endforeach()
message("--sample file")
foreach(v ${FILEROOT})
    message("   ${v}")
endforeach()

#STEP::link conan static library (Include.dev)
message("")
message("※link conan static library (Include.dev):")
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    link_libraries("-Wl,--start-group")
endif()
foreach(v ${CMAKE_LIBRARY_PATH})
    FILE(GLOB LIBMODULE "${v}/*.a")
    foreach(v_2 ${LIBMODULE})
        link_libraries(${v_2})
        message("   ${v_2}")
    endforeach()
endforeach()
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    link_libraries("-Wl,--end-group")
endif()

#STEP::link dynamic library (Once.Link)
message("")
message("※link dynamic library (Once.Link):")
set(LINKER_FLAGS "delete head")
@@dynamic lib@@
STRING(REPLACE "delete head " "" LINKER_FLAGS ${LINKER_FLAGS})
message("   ${LINKER_FLAGS}")

#STEP::add make variant (Once.Link)
message("")
message("※add make variant (Once.Link):")
@@variant@@
message("   ${CMAKE_CXX_FLAGS}")
message("")

##STEP::building goals
foreach(v ${FILEROOT})
    if("${TARGET}" STREQUAL "module")
        STRING( REGEX REPLACE "${CMAKE_SOURCE_DIR}/../Kernel/Module/@@target name@@/" "" prjName ${v} )
        STRING( REGEX REPLACE ".cpp" "" prjName ${prjName} )
    endif()
    if("${TARGET}" STREQUAL "task")
        STRING( REGEX REPLACE "${CMAKE_SOURCE_DIR}/../Kernel/Task/@@target name@@/" "" prjName ${v} )
        STRING( REGEX REPLACE ".cpp" "" prjName ${prjName} )
    endif()
    if("${TARGET}" STREQUAL "boot")
        set(prjName "Boot")
    endif()
    message("${prjName}")
    message("${v}")
    message("${FILECOMMON}")
    message("${FILEMODULE}")
    add_executable(${prjName} ${v} ${FILECOMMON} ${FILEMODULE})
    target_link_libraries(${prjName} ${LINKER_FLAGS})
endforeach()

set(CMAKE_CXX_FLAGS "-std=c++17 ${CMAKE_CXX_FLAGS}")             # c++17
if(NOT "${TARGET}" STREQUAL "boot")
    set(CMAKE_CXX_FLAGS "-g ${CMAKE_CXX_FLAGS}")                     # Debug information
    set(CMAKE_CXX_FLAGS "-Wall ${CMAKE_CXX_FLAGS}")                  # Turn on all warnings
    set(CMAKE_CXX_FLAGS_DEBUG "-O0 ${CMAKE_CXX_FLAGS}")              # The debugging package is not optimized
else()
    set(CMAKE_CXX_FLAGS_RELEASE "-O2 ${CMAKE_CXX_FLAGS}")
endif()

set(EXECUTABLE_OUTPUT_PATH ../)
######DEFAULT######
