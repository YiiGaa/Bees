/*
* 本文件内容不要人为修改，本文件由"python3 Christmas.py Input/MergeCode/LinkModule"生成
* 如果再次运行生成脚本，人为修改的代码将被删除
* 
* The contents of this file should not be modified. This file is generated by "python3 Christmas.py Input/MergeCode/LinkModule"
* If the generation script is run again, the artificially modified code will be deleted
*/

#include "Kernel/Common/ErrorCode/ErrorCode.hpp"
#include "Kernel/Common/Tools/Tools.hpp"

std::map<ERROR_CODE, std::vector<std::string>> Common::ErrorCode::errorMap = {
    //{ERROR_CODE, {"errorCode", "message"}}
    {ERR_OK, {"200", "OK"}},
    {ERR_Skip, {"200", "Skip Error"}},
    {ERR_ModuleLack, {"E-CE(TASK)", "Module Lack"}},
    {ERR_Task_Switch_Lack, {"E-CE(TASK)", "Task selector switch Lack"}},

    {ERR_Module__BrokerLogger_Exception, {"E-CE(_BrokerLogger)", "_BrokerLogger Module exception"}},
    {ERR_Module__BrokerLogger_Action_Illegal, {"E-CE(_BrokerLogger)", "_BrokerLogger Action illegal"}},
    {ERR_Module__DataQueue_Exception, {"E-CE(_DataQueue)", "_DataQueue exception"}},
    {ERR_Module__DataQueue_Action_Illegal, {"E-CE(_DataQueue)", "_DataQueue Action illegal"}},
    {ERR_Module__DataQueue_DataCreate_Exist, {"E-CE(_DataQueue)", "_DataQueue DataCreate identity exist"}},
    {ERR_Module__DataQueue_DataDelete_NotExist, {"E-CE(_DataQueue)", "_DataQueue DataDelete identity not exist"}},
    {ERR_Module__DataQueue_DataGet_Fail, {"E-CE(_DataQueue)", "_DataQueue DataGet identity not exist"}},
    {ERR_Module__DataQueue_Push_TimoutOutCall_Lack, {"E-CE(_DataQueue)", "_DataQueue Push timeout callback function lack"}},
    {ERR_Module__DataQueue_Push_End, {"E-CE(_DataQueue)", "_DataQueue Push called end"}},
    {ERR_Module__DataQueue_Pull_Empty, {"E-CE(_DataQueue)", "_DataQueue Pull empty"}},
    {ERR_Module__DataQueue_Pull_End, {"E-CE(_DataQueue)", "_DataQueue Pull called end"}},
    {ERR_Module__DataQueue_Pull_TimoutOutCall_Lack, {"E-CE(_DataQueue)", "_DataQueue Push timeout callback function lack"}},
    {ERR_Module__DataQueue_PullOnlyPop_Found_Block, {"E-CE(_DataQueue)", "_DataQueue PullOnlyPop data not found"}},
    {ERR_Module__DataFilling_Exception, {"E-CE(_DataFilling)", "_DataFilling Module exception"}},
    {ERR_Module__DataFilling_Action_Illegal, {"E-CE(_DataFilling)", "_DataFilling Action illegal"}},
    {ERR_Module__DataFilling_Switch_Null, {"E-FP(_DataFilling)", "_DataFilling Switch data get null"}},
    {ERR_Module__DataCheck_Exception, {"E-CE(_DataCheck)", "_DataCheck Module exception"}},
    {ERR_Module__DataCheck_ParamLack, {"E-CE(_DataCheck)", "_DataCheck Necessary param lack"}},
    {ERR_Module__DataCheck_SettingIllegal, {"E-CE(_DataCheck)", "_DataCheck Param check setting illegal"}},
    {ERR_Module__DataCheck_ParamTypeIllegal, {"E-CE(_DataCheck)", "_DataCheck Param type not match"}},
    {ERR_Module__DataCheck_ArrayLimit, {"E-CE(_DataCheck)", "_DataCheck Param array size over limit"}},
    {ERR_Module__DataCheck_ParamIllegal, {"E-CE(_DataCheck)", "_DataCheck Param illegal"}},
    {ERR_Module__BrokerCall_Exception, {"E-CE(_BrokerCall)", "_BrokerCall exception"}},
    {ERR_Module__BrokerCall_Action_Illegal, {"E-CE(_BrokerCall)", "_BrokerCall Action illegal"}},
    {ERR_Module__BrokerCall_DataDelete_NotExist, {"E-CE(_BrokerCall)", "_BrokerCall DataDelete identity not exist"}},
    {ERR_Module__BrokerCall_DataGet_Fail, {"E-CE(_BrokerCall)", "_BrokerCall DataGet identity not exist"}},
    {ERR_Module__BrokerCall_Call_Lack, {"E-CE(_BrokerCall)", "_BrokerCall Call function lack"}},
    {ERR_Module__ServerHttp_Exception, {"E-CE(_ServerHttp)", "_ServerHttp exception"}},
    {ERR_Module__ServerHttp_Url_Illegal, {"E-CE(_ServerHttp)", "_ServerHttp Url illegal"}},
    {ERR_Module__ServerHttp_Method_Illegal, {"E-CE(_ServerHttp)", "_ServerHttp Request method illegal"}},
    {ERR_Module__ServerHttp_Connect_Fail, {"E-CE(_ServerHttp)", "_ServerHttp Connect fail"}},
    {ERR_Module__ServerHttp_Response_Fail, {"E-CE(_ServerHttp)", "_ServerHttp Response fail"}},
    {ERR_Module__BrokerThread_Exception, {"E-CE(_BrokerThread)||_BrokerThread Module exception"}},
    {ERR_Module__BrokerThread_Action_Illegal, {"E-CE(_BrokerThread)||_BrokerThread Action illegal"}},
    {ERR_Module__BrokerThread_DataCreate_Fail, {"E-CE(_BrokerThread)||_BrokerThread DataCreate identity already exist"}},
    {ERR_Module__BrokerThread_DataDelete_NotExist, {"E-CE(_BrokerThread)||_BrokerThread DataDelete identity not exist"}},
    {ERR_Module__BrokerThread_DataGet_Fail, {"E-CE(_BrokerThread)||_BrokerThread DataGet identity not exist"}},
    {ERR_Module__BrokerThread_Create_Lack, {"E-CE(_BrokerThread)||_BrokerThread Create thread lack"}},
};

int Common::ErrorCode::IsErrorHappened(ERROR_CODE param){
    if(param == ERR_OK){
        return 0;
    }
    return -1;
}

int Common::ErrorCode::IsErrorHappened(ERROR_CODE &param, std::vector<ERROR_CODE> ignore){
    if(param == ERR_OK){
        return 0;
    }else{
        for(const ERROR_CODE& ret:ignore) {
            if(ret == ERR_Skip){
                param = ERR_OK;
                return 0;
            }
            if(param == ret){
                param = ERR_OK;
                return 0;
            }
        }
    }
    return -1;
}

std::string Common::ErrorCode::GetErrorCode(ERROR_CODE param){
    if(ErrorCode::errorMap.count(param))
        return ErrorCode::errorMap[param][0];
    return "unknown";
}

std::string Common::ErrorCode::GetErrorMessage(ERROR_CODE param){
    if(ErrorCode::errorMap.count(param))
        return ErrorCode::errorMap[param][1];
    return "unknown";
}