//此文件由Christmas根据xxx.json生成，请不要手动修改
//This file is generated by Christmas according to xxx.json. Please do not modify it manually
#ifndef   _TASK_SampleGet_HPP_
#define   _TASK_SampleGet_HPP_

#include "Kernel/Common/Common.hpp"
#include "Kernel/Module/Module.hpp"
#include <unistd.h>

namespace Task{
    namespace SampleGet{
        ERROR_CODE Do(Json::Value &passParam){
            //STEP::Init data
            Json::Value moduleParam = Json::objectValue;
            ERROR_CODE ret = ERR_OK;
            Json::Reader reader;
            std::vector<std::pair<int, Json::Value>> selectorRetryData;
            LOGGER_Info("Task function Do start", moduleParam, passParam);
        
            //STEP::Run module
            do{
                //STEP::Call _DataQueue
                reader.parse(R"({"_action": "pull", "_identity": "Start>>Data", "_resultKey": "$data", "_isPop": true})", moduleParam);
                ret = START_MODULE("_DataQueue", moduleParam, passParam);
                if(ERRORCODE_IsError(ret, {
                   
                })){
                    LOGGER_Error("Task interrupt! errorCode:"+ERRORCODE_GetCode(ret)+" ,message:"+ERRORCODE_GetMessage(ret), moduleParam, passParam);
                    continue;
                }
                TOOLS_JsonClean(moduleParam);
                
                //STEP::Call _DataFilling
                reader.parse(R"({"_action": "set", "_setting": {"$log": "** Get data::+get##$data"}})", moduleParam);
                ret = START_MODULE("_DataFilling", moduleParam, passParam);
                if(ERRORCODE_IsError(ret, {
                   
                })){
                    LOGGER_Error("Task interrupt! errorCode:"+ERRORCODE_GetCode(ret)+" ,message:"+ERRORCODE_GetMessage(ret), moduleParam, passParam);
                    continue;
                }
                TOOLS_JsonClean(moduleParam);
                
                //STEP::Call _BrokerLogger
                reader.parse(R"({"_action": "info", "_message": "get##$log"})", moduleParam);
                ret = START_MODULE("_BrokerLogger", moduleParam, passParam);
                if(ERRORCODE_IsError(ret, {
                   
                })){
                    LOGGER_Error("Task interrupt! errorCode:"+ERRORCODE_GetCode(ret)+" ,message:"+ERRORCODE_GetMessage(ret), moduleParam, passParam);
                    continue;
                }
                TOOLS_JsonClean(moduleParam);
                
            }while(false);
            LOGGER_Info("Task function Do end", moduleParam, passParam);
            return ret;
        };
        
        ERROR_CODE Start(Json::Value &passParam){
            //STEP::Init data
            Json::Value moduleParam = Json::objectValue;
            ERROR_CODE ret = ERR_OK;
            Json::Reader reader;
            std::vector<std::pair<int, Json::Value>> selectorRetryData;
            LOGGER_Info("Task function Start start", moduleParam, passParam);
        
            //STEP::Run module
            do{
                //STEP::Call _BrokerCall
                reader.parse(R"({"_action": "call", "_call": "SampleGet::Do", "_param": {}, "_loopCount": 10})", moduleParam);
                ret = START_MODULE("_BrokerCall", moduleParam, passParam);
                if(ERRORCODE_IsError(ret, {
                   
                })){
                    LOGGER_Error("Task interrupt! errorCode:"+ERRORCODE_GetCode(ret)+" ,message:"+ERRORCODE_GetMessage(ret), moduleParam, passParam);
                    continue;
                }
                TOOLS_JsonClean(moduleParam);
                
            }while(false);
            LOGGER_Info("Task function Start end", moduleParam, passParam);
            return ret;
        };
        
    }
}

#endif